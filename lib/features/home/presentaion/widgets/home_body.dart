import 'package:carousel_slider/carousel_slider.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:mafatlal_ecommerce/components/loading_animation.dart';import 'package:mafatlal_ecommerce/components/responsive_screen.dart';import 'package:mafatlal_ecommerce/constants/app_strings.dart';import 'package:mafatlal_ecommerce/constants/asset_path.dart';import 'package:mafatlal_ecommerce/constants/textstyles.dart';import 'package:mafatlal_ecommerce/core/dependency_injection.dart';import 'package:mafatlal_ecommerce/features/home/bloc/home_cubit.dart';import 'package:mafatlal_ecommerce/features/home/bloc/home_state.dart';import 'package:mafatlal_ecommerce/features/home/presentaion/widgets/footer_widget.dart';import 'package:mafatlal_ecommerce/features/home/presentaion/widgets/home_banner.dart';import 'package:mafatlal_ecommerce/features/home/presentaion/widgets/product_grid_tile.dart';import 'package:mafatlal_ecommerce/features/home/presentaion/widgets/subcategory_new.dart';class HomeBody extends StatelessWidget {  final bool isWeb;  const HomeBody({super.key, required this.isWeb});  @override  Widget build(BuildContext context) {    if (isWeb) {      return Align(        alignment: Alignment.topCenter,        child: body(context, true),      );    }    return body(context);  }  Widget body(BuildContext context, [bool isWeb = false]) {    final List<String> bannerImages = [      AssetPath.banner1,      AssetPath.banner2,      AssetPath.banner3,    ];    return BlocBuilder<HomeCubit, HomeState>(      buildWhen: (previous, current) =>          current is FetchStoreDataLoadingState ||          current is FetchStoreDataFailedState ||          current is FetchStoreDataSuccessState,      builder: (context, state) {        if (state is FetchStoreDataLoadingState) {          return const LoadingAnimation();        }        if (CubitsInjector.homeCubit.storeData == null) {          return const Center(            child: Text(              "No Data",              style: AppTextStyle.f20GreyW600,            ),          );        }        return SingleChildScrollView(          child: Column(            crossAxisAlignment: CrossAxisAlignment.start,            mainAxisAlignment: MainAxisAlignment.start,            mainAxisSize: MainAxisSize.min,            children: [              const SizedBox(height: 10),              CarouselSlider(                items: bannerImages                    .map((imagePath) => HomeBanner(imagePath: imagePath))                    .toList(),                options: CarouselOptions(                  viewportFraction: 1,                  height: ResponsiveWidget.isSmallScreen(context) ? 200 : 444.0,                  autoPlay: true,                ),              ),              Container(                margin: EdgeInsets.all(                  ResponsiveWidget.isSmallScreen(context) ? 20 : 48,                ),                height: 135,                decoration: const BoxDecoration(                  color: Color(0xFFFFFFFF),                  boxShadow: [                    BoxShadow(                      color: Color(                          0x1F004392), // #0043921F in Flutter's color format (with opacity)                      offset: Offset(0, 8), // X and Y offset for the shadow                      blurRadius: 24.0, // The blur effect for the shadow                    ),                  ],                ),                child: BlocBuilder<HomeCubit, HomeState>(                  buildWhen: (previous, current) =>                      current is UpdateSubCategorySuccessState ||                      current is UpdateSubCategoryLoadingState ||                      current is UpdateSubCategoryFailedState,                  builder: (context, state) {                    if (state is UpdateSubCategoryLoadingState) {                      return const Center(child: CircularProgressIndicator());                    }                    if (state is UpdateSubCategorySuccessState) {                      return SubCategoryList(                        subcategoriesss: state.subcategoy,                      );                    }                    return SubCategoryList(                      subcategoriesss: CubitsInjector                          .homeCubit.storeData!.categories.first.subCategories,                    );                  },                ),              ),              const SizedBox(height: 20),              BlocBuilder<HomeCubit, HomeState>(                buildWhen: (previous, current) =>                    current is UpdateProductUsingSubCategorySuccessState ||                    current is UpdateProductUsingSubCategoryLoadingState ||                    current is UpdateProductUsingSubCategoryFailedState,                builder: (context, state) {                  if (state is UpdateProductUsingSubCategoryFailedState) {                    return const Text(AppStrings.somethingWentWrong);                  }                  if (state is UpdateProductUsingSubCategoryLoadingState) {                    return const Center(child: CircularProgressIndicator());                  }                  if (state is UpdateProductUsingSubCategorySuccessState) {                    return GridView.count(                      shrinkWrap: true,                      physics: const NeverScrollableScrollPhysics(),                      padding: EdgeInsets.symmetric(                        horizontal:                            ResponsiveWidget.isSmallScreen(context) ? 20 : 48,                      ),                      crossAxisCount: ResponsiveWidget.getGridCount(context),                      childAspectRatio:                          ResponsiveWidget.isLargeScreen(context) ? 0.8 : 0.5,                      crossAxisSpacing:                          ResponsiveWidget.isLargeScreen(context) ? 68 : 15,                      mainAxisSpacing:                          ResponsiveWidget.isLargeScreen(context) ? 68 : 15,                      children: List.generate(                        state.products.length,                        (index) {                          return ProductGridTile(                            product: state.products[index],                          );                        },                      ),                    );                  }                  return GridView.count(                    shrinkWrap: true,                    physics: const NeverScrollableScrollPhysics(),                    crossAxisCount: ResponsiveWidget.getGridCount(context),                    padding: EdgeInsets.symmetric(                      horizontal:                          ResponsiveWidget.isSmallScreen(context) ? 20 : 48,                    ),                    childAspectRatio:                        MediaQuery.sizeOf(context).width < 600 ? 0.5 : 0.8,                    crossAxisSpacing:                        ResponsiveWidget.isLargeScreen(context) ? 68 : 15,                    mainAxisSpacing:                        ResponsiveWidget.isLargeScreen(context) ? 68 : 15,                    children: List.generate(                      CubitsInjector.homeCubit.storeData!.products.length,                      (index) {                        return ProductGridTile(                          product: CubitsInjector                              .homeCubit.storeData!.products[index],                        );                      },                    ),                  );                },              ),              const SizedBox(height: 40), // Add space before footer              const Footer(), // Add your footer widget here            ],          ),        );      },    );  }}